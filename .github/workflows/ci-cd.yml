name: CI/CD â†’ ECR & EC2 via SSM

# run on every push to main
on:
  push:
    branches: [ main ]

# share these across all jobs
env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: rag-chatbot
  IMAGE_TAG: ${{ github.sha }}  # Use git commit SHA instead of 'latest'
  S3_BUCKET: rag-faqstore

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-mock
      
      - name: Run unit tests
        run: |
          mkdir -p data
          touch data/faq.txt  # Create dummy data file for tests
          # No need to run chainlit init since we're mocking it
          pytest tests/ -v

  build-and-push:
    name: Build & Push Docker image to ECR
    runs-on: ubuntu-latest
    needs: test  # Only build if tests pass
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Remove old Chainlit config
        run: rm -f .chainlit/config.toml || true
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image
        run: |
          ECR_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          docker build \
            --tag $ECR_URI/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker tag $ECR_URI/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} $ECR_URI/${{ env.ECR_REPOSITORY }}:latest
          docker push $ECR_URI/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push $ECR_URI/${{ env.ECR_REPOSITORY }}:latest

  deploy:
    name: Deploy to EC2 via SSM
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy container via SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --parameters '{
              "commands": [
                "aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin '"${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com"'",
                "docker pull '"${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"'",
                "docker stop rag-chatbot || true",
                "docker rm rag-chatbot || true",
                "docker run -d --name rag-chatbot -p 127.0.0.1:8000:8000 -e AWS_DEFAULT_REGION=us-east-1 -e AWS_REGION=ap-southeast-1 -e S3_BUCKET=${{ env.S3_BUCKET }} --restart unless-stopped '"${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"'"
              ]
            }' \
            --region ${{ env.AWS_REGION }}

      - name: Health check
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --parameters '{
              "commands": [
                "attempt=1",
                "max_attempts=12",
                "while [ $attempt -le $max_attempts ]; do",
                "  echo \"Health check attempt $attempt of $max_attempts\"",
                "  if curl -s http://localhost:8000/health >/dev/null; then",
                "    echo \"Service is healthy\"",
                "    exit 0",
                "  fi",
                "  attempt=$((attempt+1))",
                "  sleep 10",
                "done",
                "echo \"Service failed to become healthy after $max_attempts attempts\"",
                "exit 1"
              ]
            }' \
            --region ${{ env.AWS_REGION }}